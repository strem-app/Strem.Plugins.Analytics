@using Strem.Plugins.Analytics.Types
@using Strem.Plugins.Analytics.Models.Filtering
@using Strem.Plugins.Analytics.Extensions

@inherits Strem.Plugins.Analytics.Components.AnalyticsComponent

<h3 class="title is-5 is-capitalized has-text-black">Top Chatters</h3>
<p class="subtitle is-6 mb-0 has-text-black">Between [@(Filter.StartPeriod.ToString("g")) - @(Filter.EndPeriod.ToString("g"))]</p>
<div class="content">
    @{ var metrics = GenerateMetrics().ToArray(); }
    @if (metrics.Length == 0)
    {
        <p>No Data Available</p>
    }
    else
    {
        <ol>
            @foreach (var topChatters in GenerateMetrics())
            {
                <li>
                    <span class="has-text-weight-bold">@topChatters.Key</span> <span>(@topChatters.Value @AnalyticsEventTypes.ChatMessage.GetNiceTypeName()s)</span>
                </li>
            }
        </ol>
    }
</div>

@code 
{
    public IEnumerable<KeyedMetric> GenerateMetrics(int count = 10)
    {
        return Data
            .Where(x => x.EventType == AnalyticsEventTypes.ChatMessage)
            .GroupBy(x => x.UserContext)
            .Select(x => new KeyedMetric(x.First().UserContext, x.Count()))
            .OrderByDescending(x => x.Value)
            .Take(count);
    }
}
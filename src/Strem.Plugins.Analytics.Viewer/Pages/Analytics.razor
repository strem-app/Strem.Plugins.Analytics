@page "/analytics"

@using Microsoft.JSInterop
@using Strem.Core.Extensions
@using Strem.Core.State
@using Microsoft.AspNetCore.Components
@using Strem.Core.Types
@using Strem.Infrastructure.Services
@using Strem.Plugins.Analytics.Models
@using Strem.Plugins.Analytics.Models.Filtering
@using Strem.Plugins.Analytics.Services.Metrics
@using Strem.Plugins.Analytics.Services.Repositories
@using Strem.Plugins.Analytics.Services.Repositories.Queries

@inject IJSRuntime JS
@inject IAppState AppState
@inject IAnalyticsComponentRegistry ComponentRegistry
@inject IAnalyticsEventRepository AnalyticsRepository

<div class="container is-fluid">
    <ErrorBoundary>
        <ChildContent>
            
            <h3 class="title is-3">Analytics Dashboard</h3>
            <div class="box has-background-grey-dark">
                <Accordion Title="Analytics Settings" HeaderClasses="is-info" IsExpanded="true">
                    <div class="columns">
                        <div class="column">
                            <div class="field">
                                <label class="label">Date Range</label>
                                <div class="field is-grouped">
                                    <div class="control">
                                        <input type="datetime-local" class="input" value="@Filter.StartPeriod.ToString("s")" @onchange="x => UpdateStartPeriod(x.Value.ToString())"/>
                                    </div>
                                    <div class="control">
                                        <div class="divider is-vertical">To</div>
                                    </div>
                                    <div class="control">
                                        <input type="datetime-local" class="input" value="@Filter.EndPeriod.ToString("s")" @onchange="x => UpdateEndPeriod(x.Value.ToString())"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="column">
                            <label class="label">Date Rounding</label>
                            <div class="field has-addons">
                                <div class="control">
                                    <EnumSelectInput @bind-Value="Filter.TimeUnitRounding.TimeUnit" T="TimeUnitType" ValueChangedWithPrevious="() => InvokeAsync(RefreshComponents)"/>
                                </div>
                                <div class="control is-expanded">
                                    <IntInput @bind-Value="Filter.TimeUnitRounding.UnitValue" ValueChangedWithPrevious="() => InvokeAsync(RefreshComponents)"/>
                                </div>
                            </div>
                            <HelperInfo>This lets you round the time up to intervals, i.e 15 minutes means it will group data into 15 minute intervals, or 2 hours etc</HelperInfo>
                        </div>
                    </div>
                    <div class="columns">
                        <div class="column">
                            <div class="field">
                                <label class="label">Platform</label>
                                <div class="control">
                                    <AutoComplete Data="@PreMadePlatformContext" @bind-Value="@Filter.PlatformContext"/>
                                </div>
                            </div>
                        </div>
                        <div class="column">
                            <div class="field">
                                <label class="label">Source/Channel</label>
                                <div class="control">
                                    <AutoComplete Data="@PreMadeSourceContext" @bind-Value="@Filter.SourceContext"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="columns">
                        <div class="column">
                            <div class="field">
                                <label class="label">Available Components</label>
                                <div class="control">
                                    <div class="buttons">
                                        @foreach (var availableComponent in ComponentRegistry.GetApplicable(Filter))
                                        {
                                            <button class="button @(IsComponentActive(availableComponent.Code) ? "is-success" : "")" @onclick="() => ToggleComponent(availableComponent.Code)">
                                                <span class="icon is-small">
                                                    <i class="fas @(IsChartComponent(availableComponent.ComponentType) ? "fa-chart-line" : "fa-solid fa-square-poll-horizontal")"></i>
                                                </span>
                                                <span>@availableComponent.Title</span>
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </Accordion>

                <div>
                    <div class="is-flex is-flex-direction-row is-flex-wrap-wrap">
                        @{
                            var applicableComponents = ComponentRegistry
                                .GetApplicable(Filter)
                                .Where(x => IsComponentActive(x.Code))
                                .ToArray();

                            Dictionary<string, object> componentProps = null;
                            
                            if (applicableComponents.Length > 0)
                            {
                                var filteredData = FilterData();
                                componentProps = new()
                                {
                                    { "Data", filteredData },
                                    { "Filter", Filter },
                                };
                            }
                        }
                        
                        @foreach (var component in applicableComponents)
                        {
                            <div class="analytics-component m-3 box is-flex is-flex-direction-column">
                                <DynamicComponent Type="component.ComponentType" Parameters="@componentProps"/>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </ChildContent>
        <ErrorContent>
            <TheSkyIsFalling/>
        </ErrorContent>
    </ErrorBoundary>
</div>

@code {
    
    public bool HasLoadedChartLib { get; set; }
    public List<string> ActiveComponents { get; set; } = new();
    public AnalyticsFilter Filter { get; set; } = new();
    
    public string[] PreMadePlatformContext { get; set; }
    public string[] PreMadeSourceContext { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        PreMadePlatformContext = new[] { "twitch" };
        Filter.StartPeriod = DateTime.Now.AddDays(-1).GetStartOfDay();
        Filter.EndPeriod = DateTime.Now.GetEndOfDay();
        Filter.PlatformContext = "twitch";
            
        var existingUsername = AppState.AppVariables.Get("username", "twitch");
        PreMadeSourceContext = string.IsNullOrEmpty(existingUsername) ? Array.Empty<string>() : new[] { existingUsername };
        Filter.SourceContext = string.IsNullOrEmpty(existingUsername) ? "" : existingUsername;
        
        await JS.InvokeVoidAsync("loadJsFile", $"{StremPathHelper.GetPluginRootPath("Strem.Plugins.Analytics.Viewer")}/wwwroot/js/apexcharts.fixed.js");
        await JS.InvokeVoidAsync("loadJsFile", $"{StremPathHelper.GetPluginRootPath("Strem.Plugins.Analytics.Viewer")}/wwwroot/_content/Blazor-ApexCharts/js/blazor-apex-charts.js");
        await JS.InvokeVoidAsync("loadCssFile", $"{StremPathHelper.GetPluginRootPath("Strem.Plugins.Analytics.Viewer")}/wwwroot/_content/Blazor-ApexCharts/css/apexcharts.css");
        await JS.InvokeVoidAsync("loadCssFile", $"{StremPathHelper.GetPluginRootPath("Strem.Plugins.Analytics.Viewer")}/wwwroot/css/analytics-styles.css");

        HasLoadedChartLib = true;
    }

    public void UpdateStartPeriod(string newDate)
    {
        Filter.StartPeriod = DateTime.Parse(newDate);
        InvokeAsync(RefreshComponents);
    }

    public void UpdateEndPeriod(string newDate)
    {
        Filter.EndPeriod = DateTime.Parse(newDate);
        InvokeAsync(RefreshComponents);
    }

    public void ToggleComponent(string componentCode)
    {
        if (ActiveComponents.Contains(componentCode))
        { ActiveComponents.Remove(componentCode); }
        else
        { ActiveComponents.Add(componentCode); }
    }

    public bool IsComponentActive(string componentCode)
    { return ActiveComponents.Contains(componentCode); }

    public bool IsChartComponent(Type componentType)
    { return componentType.IsSubclassOf(typeof(ChartComponent));}

    public IReadOnlyCollection<AnalyticsEvent> FilterData()
    { return AnalyticsRepository.Query(new GetAnalyticsEventsQuery(Filter)).ToArray(); }

    public async Task RefreshComponents()
    {
        
    }
}
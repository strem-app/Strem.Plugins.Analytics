@using Strem.Plugins.Analytics.Services.Repositories
@using Strem.Plugins.Analytics.Models
@using Strem.Plugins.Analytics.Services.Repositories.Queries
@using Strem.Plugins.Analytics.Types
@using System.Diagnostics
@inject IStreamMetricRepository MetricRepository

<div class="@ChartContainerStyles">
    
    @*
    <div class="box has-background-info has-text-white">
        <div class="columns">
            <div class="column">
                <div class="field">
                    <label class="label has-text-white">Metrics Types</label>
                    <div class="control">
                        <AutoComplete Data="PreMadeMetricTypes" @bind-Value="MetricType"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
    *@
    
    @{ var data = GetMetrics(); }
    @if (data.Count == 0)
    { <p class="box">No Data For Period</p> }
    else
    {
        <div class="box">
            <ApexChart TItem="StreamMetric" Title="Stream Metrics" Height="400" OnZoomed="ResetBreakdownPeriod" XAxisType="XAxisType.Datetime">
                
                @foreach (var perMetricData in data.GroupBy(x => x.MetricType))
                {
                    <ApexPointSeries TItem="StreamMetric" Items="perMetricData" Name="@GetNiceTypeName(perMetricData.Key)" SeriesType="SeriesType.Line"
                                     XValue="@(e => e.MetricDateTime)"
                                     YAggregate="@(e => e.Count())"
                                     OrderBy="x => x.X"/>
                }

            </ApexChart>
        </div>
        
        <div class="box has-background-info has-text-white">
            <h3 class="title is-4 is-capitalized">Top @(GetNiceTypeName(MetricTypes.ViewerCount)) between @(MinDateRange.ToString("f")) - @(MaxDateRange.ToString("f"))</h3>
            <div class="content">
                <ol>
                    @foreach (var topMetrics in GetTopMetrics(data, MetricTypes.ViewerCount))
                    {
                        <li><span class="has-text-weight-bold">@topMetrics.Time.ToString("f")</span> (@topMetrics.Count @GetNiceTypeName(MetricTypes.ViewerCount))</li>
                    }
                </ol>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public DateTime StartPeriod { get; set; }
    
    [Parameter]
    public DateTime EndPeriod { get; set; }
    
    [Parameter]
    public string PlatformContext { get; set; }
    
    [Parameter]
    public string SourceContext { get; set; }

    [Parameter]
    public string ChartContainerStyles { get; set; } = string.Empty;

    public string[] PreMadeMetricTypes = new[] { MetricTypes.ViewerCount, MetricTypes.Currency };
    public string MetricType { get; set; } = MetricTypes.ViewerCount;
    
    public DateTime MinDateRange { get; set; }
    public DateTime MaxDateRange { get; set; }

    protected override void OnInitialized()
    {
        MinDateRange = StartPeriod;
        MaxDateRange = EndPeriod;
        base.OnInitialized();
    }
    
    public void ResetBreakdownPeriod(ZoomedData<StreamMetric> zoomedData)
    {
        if (!zoomedData.IsZoomed)
        {
            MinDateRange = StartPeriod;
            MaxDateRange = EndPeriod;
            return;
        }
        
        if (zoomedData.XAxis.Min.HasValue)
        { MinDateRange = DateTime.UnixEpoch.AddMilliseconds((double)zoomedData.XAxis.Min.Value); }
        else
        { MinDateRange = StartPeriod; }
        
        if (zoomedData.XAxis.Max.HasValue)
        { MaxDateRange = DateTime.UnixEpoch.AddMilliseconds((double)zoomedData.XAxis.Max.Value); }
        else
        { MaxDateRange = EndPeriod; }
    }

    public string GetNiceTypeName(string metricType)
    { return metricType.Replace("-", " ").Replace("_", " "); }
    
    public IEnumerable<(DateTime Time, int Count)> GetTopMetrics(IReadOnlyCollection<StreamMetric> data, string metricType)
    {
        return data
            .Where(x => x.MetricType == metricType && x.MetricDateTime >= MinDateRange && x.MetricDateTime <= MaxDateRange)
            .GroupBy(x => x.MetricDateTime.ToString("g"))
            .Select(x => (Time: DateTime.Parse(x.Key), Count: x.Count()))
            .OrderByDescending(x => x.Count)
            .Take(5);
    }
    
    public IReadOnlyCollection<StreamMetric> GetMetrics()
    {
        var query = new GetMetricsQuery(SourceContext, PlatformContext, StartPeriod, EndPeriod);
        var results = MetricRepository.Query(query);
        return results.ToArray();
    }
}
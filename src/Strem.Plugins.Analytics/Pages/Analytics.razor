@page "/analytics"

@using Microsoft.JSInterop
@using Strem.Core.Extensions
@using Strem.Core.State
@using Strem.Plugins.Analytics.Extensions
@using Microsoft.AspNetCore.Components

@inject IJSRuntime JS
@inject IAppState AppState

<div class="container is-fluid">
    <ErrorBoundary>
        <ChildContent>
            <h3 class="title is-3">Analytics</h3>
            <div class="box has-background-grey-dark">
                <div class="box has-background-info">
                    <div class="columns">
                        <div class="column">
                            <div class="field">
                                <label class="label has-text-white">Date Range</label>
                                <div class="field is-grouped">
                                    <div class="control">
                                        <input type="datetime-local" class="input" value="@StartPeriod.ToString("s")" @onchange="x => UpdateStartPeriod(x.Value.ToString())"/>
                                    </div>
                                    <div class="control">
                                        <div class="divider is-vertical has-text-white">To</div>
                                    </div>
                                    <div class="control">
                                        <input type="datetime-local" class="input" value="@EndPeriod.ToString("s")" @onchange="x => UpdateEndPeriod(x.Value.ToString())"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="column">
                            <div class="field">
                                <label class="label has-text-white">Platform</label>
                                <div class="control">
                                    <AutoComplete Data="@PreMadePlatformContext" @bind-Value="@PlatformContext" />
                                </div>
                            </div>
                        </div>
                        <div class="column">
                            <div class="field">
                                <label class="label has-text-white">Source/Channel</label>
                                <div class="control">
                                    <AutoComplete Data="@PreMadeSourceContext" @bind-Value="@SourceContext" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="columns">
                        <div class="column">
                            <div class="field">
                                <label class="label has-text-white">Display Type</label>
                                <div class="control">
                                    <div class="field has-addons">
                                        <p class="control">
                                            <button class="button @(AnalyticsType == AnalyticsTypes.Interactions ? "is-success" : "")" @onclick="() => AnalyticsType = AnalyticsTypes.Interactions">
                                                <span class="icon is-small">
                                                    <i class="fas fa-align-left"></i>
                                                </span>
                                                <span>Interactions</span>
                                            </button>
                                        </p>
                                        <p class="control">
                                            <button class="button @(AnalyticsType == AnalyticsTypes.Metrics ? "is-success" : "")" @onclick="() => AnalyticsType = AnalyticsTypes.Metrics">
                                                <span class="icon is-small">
                                                    <i class="fas fa-align-center"></i>
                                                </span>
                                                <span>Metrics</span>
                                            </button>
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    @if (HasLoadedChartLib && AnalyticsType == AnalyticsTypes.Interactions)
                    {
                        <InteractionChart StartPeriod="@StartPeriod" EndPeriod="@EndPeriod" PlatformContext="@PlatformContext" SourceContext="@SourceContext"/>
                    }
                    else if (HasLoadedChartLib && AnalyticsType == AnalyticsTypes.Metrics)
                    {
                        <MetricsChart StartPeriod="@StartPeriod" EndPeriod="@EndPeriod" PlatformContext="@PlatformContext" SourceContext="@SourceContext"/>
                    }
                </div>
            </div>
        </ChildContent>
        <ErrorContent>
            <TheSkyIsFalling/>
        </ErrorContent>
    </ErrorBoundary>
</div>

@code {

    public enum AnalyticsTypes
    {
        Interactions,
        Metrics
    }
    
    public bool HasLoadedChartLib { get; set; }
    public AnalyticsTypes AnalyticsType { get; set; }
    
    public DateTime StartPeriod { get; set; } = DateTime.Now.GetStartOfMonth();
    public DateTime EndPeriod { get; set; } = DateTime.Now.GetEndOfMonth();
    public string PlatformContext { get; set; } = "twitch";
    public string SourceContext { get; set; } = string.Empty;
    
    public string[] PreMadePlatformContext { get; set; }
    public string[] PreMadeSourceContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PreMadePlatformContext = new[] { "twitch" };

        var existingUsername = AppState.AppVariables.Get("username", "twitch");
        PreMadeSourceContext = string.IsNullOrEmpty(existingUsername) ? Array.Empty<string>() : new[] { existingUsername };
        SourceContext = string.IsNullOrEmpty(existingUsername) ? "" : existingUsername;
        
        await JS.InvokeVoidAsync("loadJsFile", $"{PluginPathHelper.GetPluginStaticFileRootPath("Strem.Plugins.Analytics")}/js/apexcharts.fixed.js");
        await JS.InvokeVoidAsync("loadJsFile", $"{PluginPathHelper.GetPluginStaticFileRootPath("Strem.Plugins.Analytics")}/_content/Blazor-ApexCharts/js/blazor-apex-charts.js");
        await JS.InvokeVoidAsync("loadCssFile", $"{PluginPathHelper.GetPluginStaticFileRootPath("Strem.Plugins.Analytics")}/_content/Blazor-ApexCharts/css/apexcharts.css");

        HasLoadedChartLib = true;
    }
    
    public void UpdateStartPeriod(string newDate)
    { StartPeriod = DateTime.Parse(newDate); }

    public void UpdateEndPeriod(string newDate)
    { EndPeriod = DateTime.Parse(newDate); }
}
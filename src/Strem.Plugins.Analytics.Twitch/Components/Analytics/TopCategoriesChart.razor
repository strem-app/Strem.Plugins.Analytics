@using ApexCharts
@using Strem.Plugins.Analytics.Twitch.Models
@using Strem.Plugins.Analytics.Twitch.Queries
@using Strem.Plugins.Analytics.Viewer.Types

@inherits Strem.Plugins.Analytics.Viewer.Components.ChartComponent

<h3 class="title is-5 is-capitalized has-text-black">Top Categories</h3>
@{ var metrics = GetMetrics(); }
@if (metrics.Count == 0)
{
    <p>No Data Available</p>
}
else
{
    <ApexChart TItem="CategoryChartMetric" Title="Top 10 Categories" @ref="ChartInstance" Options="ChartOptions" Width="500" Height="300">
    
        <ApexPointSeries TItem="CategoryChartMetric" Items="metrics" Name="Viewer Count" 
                         SeriesType="SeriesType.Bar"
                         Stroke="@(new SeriesStroke { Color = CommonFieldColours.ViewerFieldColour })"
                         XValue="@(e => e.Category)"
                         YValue="@(e => e.Viewers)"/>    
        
        <ApexPointSeries TItem="CategoryChartMetric" Items="metrics" Name="Total Messages" 
                         SeriesType="SeriesType.Bar"
                         Stroke="@(new SeriesStroke { Color = CommonFieldColours.ChatMessagesColour })"
                         XValue="@(e => e.Category)"
                         YValue="@(e => e.ChatCount)"/>
        
        <ApexPointSeries TItem="CategoryChartMetric" Items="metrics" Name="Profitability" 
                         SeriesType="SeriesType.Bar"
                         Stroke="@(new SeriesStroke { Color = CommonFieldColours.CurrencyFieldColour })"
                         XValue="@(e => e.Category)"
                         YValue="@(e => e.Bits + (e.Subs * 300))"/>
    
    </ApexChart>
}

@code {
    
    
    public ApexChart<CategoryChartMetric> ChartInstance { get; set; }
    public ApexChartOptions<CategoryChartMetric> ChartOptions { get; set; } = new();

    protected override void OnInitialized()
    {
        ChartOptions.Yaxis = new List<YAxis>();
        ChartOptions.Yaxis.Add(new YAxis()
        {
            Title = new AxisTitle() { Text = "Viewer Count" },
            DecimalsInFloat = 0
        });
        
        ChartOptions.Yaxis.Add(new YAxis()
        {
            Show = false,
        });
        
        ChartOptions.Yaxis.Add(new YAxis()
        {
            Title = new AxisTitle() { Text = "Profitability" },
            DecimalsInFloat = 0,
            Opposite = true
        });
        
        base.OnInitialized();
    }
    
    public IReadOnlyCollection<CategoryChartMetric> GetMetrics()
    {
        return AnalyticsEventRepository
            .Query(new GetTopCategoriesQuery(Filter))
            .OrderByDescending(x => x.Viewers)
            .ToArray();
    }
    
    public override async Task Refresh()
    { await ChartInstance.RenderAsync(); }
}
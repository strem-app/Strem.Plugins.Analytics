@using ApexCharts
@using Strem.Plugins.Analytics.Extensions
@using Strem.Plugins.Analytics.Twitch.Models
@using Strem.Plugins.Analytics.Twitch.Queries
@using Strem.Plugins.Analytics.Viewer.Types

@inherits Strem.Plugins.Analytics.Viewer.Components.ChartComponent

<h3 class="title is-5 is-capitalized has-text-black">Bits Chart</h3>
@{ var metrics = GetMetrics(); }
@if (metrics.Count == 0)
{
    <p>No Data Available</p>
}
else
{
    <ApexChart TItem="BitsChartMetrics" Title="Bits Chart" @ref="ChartInstance" Options="ChartOptions" Width="500" Height="300">
    
        <ApexPointSeries TItem="BitsChartMetrics" Items="metrics" Name="Bits Spent" 
                    SeriesType="SeriesType.Bar" XValue="@(e => e.Date)" YValue="@(e => e.Bits)"
                    Stroke="@(new SeriesStroke { Color = CommonFieldColours.CurrencyFieldColour })"
                    OrderBy="x => x.X"/>
        
        <ApexPointSeries TItem="BitsChartMetrics" Items="metrics" Name="Viewer Count"
                    SeriesType="SeriesType.Line" XValue="@(e => e.Date)" YValue="@(e => e.Viewers)"
                    Stroke="@(new SeriesStroke { Width = 2, Color = CommonFieldColours.ViewerFieldColour })"
                    OrderBy="x => x.X"/>
    
    </ApexChart>
}

@code {
    
    public ApexChart<BitsChartMetrics> ChartInstance { get; set; }
    public ApexChartOptions<BitsChartMetrics> ChartOptions { get; set; } = new();

    protected override void OnInitialized()
    {
        ChartOptions.Xaxis = new XAxis()
        {
            Type = XAxisType.Datetime
        };

        ChartOptions.Yaxis = new List<YAxis>();
        ChartOptions.Yaxis.Add(new YAxis()
        {
            Title = new AxisTitle() { Text = "Bits Spent" },
            DecimalsInFloat = 0
        });
        
        ChartOptions.Yaxis.Add(new YAxis()
        {
            Title = new AxisTitle() { Text = "Viewer Count" },
            DecimalsInFloat = 0,
            Opposite = true
        });
        
        base.OnInitialized();
    }

    public IReadOnlyCollection<BitsChartMetrics> GetMetrics()
    {
        return AnalyticsEventRepository
            .Query(new GetBitChartDataQuery(Filter))
            .GroupBy(x => x.Date.RoundToNearest(Filter.TimeUnitRounding))
            .Select(x => new BitsChartMetrics(x.Key,
                (int)x.Average(y => y.Viewers),
                x.Sum(y => y.Bits)))
            .ToArray();
    }
    
    public override async Task Refresh()
    { await ChartInstance.RenderAsync(); }
}